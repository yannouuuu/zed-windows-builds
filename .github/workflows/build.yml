name: Zed Windows Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - msix-build

permissions:
  contents: write

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
    steps:
      - name: Get latest release tag (including pre-releases)
        id: get_latest_tag
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/zed-industries/zed/releases" | jq -r 'first | .tag_name')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag found (including pre-releases): $LATEST_TAG"

      - name: Debug - Print LATEST_TAG
        run: |
          echo "LATEST_TAG value: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}"
          if [ -z "${{ steps.get_latest_tag.outputs.LATEST_TAG }}" ]; then
            echo "Error: LATEST_TAG is empty or null"
            exit 1
          fi

      - name: Debug - Print API response
        run: |
          API_RESPONSE=$(curl -s "https://api.github.com/repos/zed-industries/zed/releases")
          echo "API Response: $API_RESPONSE"

  build-windows-amd64:
    needs: set-version
    runs-on: windows-latest
    env:
      LATEST_TAG: ${{ needs.set-version.outputs.latest_tag }}
    steps:
      - name: Checkout Zed repository
        uses: actions/checkout@v4
        with:
          repository: zed-industries/zed
          path: zed

      - name: Checkout Yannou's build repository
        uses: actions/checkout@v4
        with:
          repository: yannouuuu/zed-windows-build
          path: build-repo
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - run: rustup target add wasm32-wasip1

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Enable Long Paths for Git
        run: git config --system core.longpaths true
        shell: bash

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            zed/target/
            C:/Users/runneradmin/.cargo/registry/
            C:/Users/runneradmin/.cargo/git/  
            C:/Users/runneradmin/.rustup/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            C:/Users/runneradmin/.cargo/registry/
            C:/Users/runneradmin/.cargo/git/  
            C:/Users/runneradmin/.rustup/
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Debug - List directory structure
        run: |
          Write-Host "Current directory:"
          Get-Location
          Write-Host "Directory structure:"
          Get-ChildItem -Recurse -Depth 3 | Select-Object FullName

      - name: Clean up old build artifacts
        run: |
          $releasePath = "zed/target/release"
          if (Test-Path $releasePath) {
            # Define file extensions to remove
            $extensionsToRemove = @("*.exe", "*.msix", "*.msixbundle", "*.appinstaller")

            # Remove files with specified extensions
            foreach ($extension in $extensionsToRemove) {
              Get-ChildItem -Path $releasePath -Filter $extension | ForEach-Object {
                Remove-Item $_.FullName -Force
                Write-Host "Removed file: $($_.Name)"
              }
            }

            # List remaining contents of the release directory
            Write-Host "Remaining contents of ${releasePath}:"
            Get-ChildItem -Path $releasePath | ForEach-Object {
              Write-Host "  $($_.Name)"
            }
          } else {
            Write-Host "Release directory does not exist yet: ${releasePath}"
          }

      - name: Build Zed
        run: |
          cd zed
          cargo build --release -j 4

      - name: Verify Zed build
        run: |
          if (Test-Path "zed/target/release/Zed.exe") {
            Write-Host "Zed.exe built successfully"
          } else {
            Write-Host "Zed.exe not found after build"
            exit 1
          }

      - name: Prepare files for MSIX Packaging
        shell: pwsh
        run: |
          Copy-Item -Path "zed/target/release/Zed.exe" -Destination "zed/Zed.exe" -Force
          Write-Host "Copied Zed.exe to zed/ for MSIX packaging"

      - name: Debug - Print LATEST_TAG
        run: |
          Write-Host "LATEST_TAG value: $env:LATEST_TAG"

      - name: Rename build output
        run: |
          $sourceDir = "zed/target/release"
          $sourceName = "Zed.exe" # This refers to the original Zed.exe before it might be renamed for MSIX
          $newFileName = "Zed-windows-amd64-$env:LATEST_TAG.exe"
          # The original Zed.exe is now at zed/target/release/Zed.exe
          # The one for MSIX is zed/Zed.exe
          # This step renames the one in target/release for the .exe artifact
          $sourcePathToRename = Join-Path -Path $sourceDir -ChildPath $sourceName
          $destinationPathForExeArtifact = Join-Path -Path $sourceDir -ChildPath $newFileName
          if (Test-Path -Path $sourcePathToRename) {
            Rename-Item -Path $sourcePathToRename -NewName $newFileName -Force
            Write-Host "Original Zed.exe in target/release renamed successfully to $newFileName for .exe artifact"
          } else {
            Write-Host "Error: Source file $sourcePathToRename not found for renaming (this is for the standalone .exe artifact)"
            # Potentially allow this to not fail the build if MSIX is the primary goal
            # exit 1
          }

      - name: Prepare App Installer package
        working-directory: ./zed
        run: |
          Copy-Item ../build-repo/AppxManifest.zed.xml . -Force

          # Check if the assets folder exists
          if (-not (Test-Path "assets")) {
            Write-Host "assets folder not found, creating it."
            New-Item -ItemType Directory -Path "assets"
          }

          # Check for necessary icons
          $requiredAssets = @(
            "Square44x44Logo.png",
            "Square150x150Logo.png",
            "LargeTile.png",
            "SmallTile.png",
            "StoreLogo.png"
          )

          foreach ($asset in $requiredAssets) {
            $assetPath = "assets/$asset"
            if (Test-Path $assetPath) {
              Write-Host "$asset exists in assets folder"
            } else {
              Write-Host "Warning: $asset not found in assets folder. Creating an empty image."
              # Ensure ImageMagick is available or use a simpler placeholder creation
              try {
                magick convert -size 44x44 xc:transparent $assetPath
              } catch {
                Write-Warning "ImageMagick 'magick' command not found or failed. Creating a dummy file for $asset."
                Set-Content -Path $assetPath -Value "dummy placeholder"
              }
            }
          }

          # Display the contents of the assets folder
          Write-Host "Contents of assets folder:"
          Get-ChildItem -Path "assets" | ForEach-Object { Write-Host "  $($_.Name)" }

      - name: Debug - List zed directory contents after App Installer prep
        working-directory: ./zed
        run: |
          Write-Host "Current directory:"
          Get-Location
          Write-Host "Directory contents:"
          Get-ChildItem -Force | Select-Object Name, LastWriteTime, Length

      - name: Update AppxManifest with correct version and tag
        working-directory: ./zed
        run: |
          # Get version from tag, e.g., v0.190.0-pre -> 0.190.0
          $versionString = ($env:LATEST_TAG -replace '^v', '').Split('-')[0]

          # Split into components
          $versionComponents = $versionString.Split('.')

          # Pad the array with '0's to ensure it has at least 4 parts
          while ($versionComponents.Count -lt 4) {
              $versionComponents += '0'
          }

          # Take only the first 4 parts and join them
          $finalVersion = $versionComponents[0..3] -join '.'

          # Update the manifest file
          $manifestPath = "AppxManifest.zed.xml"
          $content = Get-Content $manifestPath -Raw
          $content = $content.Replace('__VERSION__', $finalVersion)
          Set-Content $manifestPath -Value $content -NoNewline

          Write-Host "Updated AppxManifest.zed.xml with version $finalVersion"

      - name: Rename AppxManifest for Packaging
        shell: pwsh
        working-directory: ./zed
        run: |
          if (Test-Path "AppxManifest.zed.xml") {
            Rename-Item -Path "AppxManifest.zed.xml" -NewName "AppxManifest.xml" -Force
            Write-Host "Renamed AppxManifest.zed.xml to AppxManifest.xml for packaging"
          } else {
            Write-Host "Error: AppxManifest.zed.xml not found in zed/ for renaming"
            exit 1
          }

      - name: Create Self-Signed Certificate
        shell: pwsh
        run: |
          $certPassword = ConvertTo-SecureString -String "$env:CERT_PASSWORD" -AsPlainText -Force
          $pfxFilePath = "signing_cert.pfx"
          $cerFilePath = "signing_cert.cer" # Path for the .cer file
          $publisher = "CN=ZedIndustries" # Must match AppxManifest.xml Publisher

          $certificate = New-SelfSignedCertificate -Subject $publisher -CertStoreLocation "Cert:\CurrentUser\My" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -NotAfter (Get-Date).AddYears(5) -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}ca=false")

          # Export the .pfx (contains private and public key)
          Export-PfxCertificate -Cert $certificate.PSPath -FilePath $pfxFilePath -Password $certPassword
          Write-Host "Self-signed PFX certificate created at $pfxFilePath"

          # Export the .cer (contains only public key)
          Export-Certificate -Cert $certificate.PSPath -FilePath $cerFilePath -Type CERT
          Write-Host "Self-signed CER certificate created at $cerFilePath"
        env:
          CERT_PASSWORD: ${{ secrets.MSIX_CERT_PASSWORD }}

      - name: Package Application to MSIX
        shell: pwsh
        run: |
          # Create a staging directory for a clean package at the workspace root
          $stagingDir = "$env:GITHUB_WORKSPACE/msix-staging"
          New-Item -ItemType Directory -Path $stagingDir -Force

          # Copy required files to the staging directory
          Copy-Item -Path "zed/Zed.exe" -Destination $stagingDir
          Copy-Item -Path "zed/assets" -Destination $stagingDir -Recurse
          Copy-Item -Path "zed/AppxManifest.xml" -Destination $stagingDir

          $msixOutputPath = "$env:GITHUB_WORKSPACE/zed/Zed-windows-amd64-$env:LATEST_TAG.msix"
          Write-Host "Packaging content of $stagingDir into $msixOutputPath"
          
          # List files to be packaged for debugging
          Get-ChildItem $stagingDir -Recurse

          # Run makeappx on the clean staging directory
          makeappx.exe pack /d $stagingDir /p "$msixOutputPath" /o

          Write-Host "MSIX package created: $msixOutputPath"
          if (-not (Test-Path $msixOutputPath)) {
            Write-Host "Error: MSIX package not found at $msixOutputPath"
            exit 1
          }

      - name: Sign the MSIX Package
        shell: pwsh
        run: |
          $msixPath = "zed/Zed-windows-amd64-$env:LATEST_TAG.msix" # Path relative to workspace root
          $certPath = "signing_cert.pfx" # Path relative to workspace root
          Write-Host "Signing MSIX package: $msixPath with cert $certPath"
          signtool.exe sign /fd SHA256 /a /f "$certPath" /p "$env:CERT_PASSWORD" "$msixPath"
          Write-Host "MSIX package signed."
        env:
          CERT_PASSWORD: ${{ secrets.MSIX_CERT_PASSWORD }}

      - name: Prepare App Installer manifest
        working-directory: ./zed
        run: |
          $version = $env:LATEST_TAG -replace '^v', ''
          $versionParts = $version -split '-'
          $mainVersion = $versionParts[0]

          # Ensure we have four parts to the version number
          $versionNumbers = $mainVersion -split '\\.'
          if ($versionNumbers.Length -lt 4) {
            $mainVersion = $mainVersion + ('.0' * (4 - $versionNumbers.Length))
          }

          # Corrected variable for GitHub repository access
          $repoFullName = "${{ github.repository }}" # e.g., yannouuuu/zed-windows-build

          $appInstallerContent = @"
          <?xml version="1.0" encoding="utf-8"?>
          <AppInstaller
            xmlns="http://schemas.microsoft.com/appx/appinstaller/2017/2"
            Version="$mainVersion"
            Uri="https://$($env:GITHUB_SERVER_URL)/$repoFullName/releases/download/$($env:LATEST_TAG)/Zed-windows-amd64-$($env:LATEST_TAG).appinstaller">

            <MainBundle
              Name="Zed"
              Version="$mainVersion"
              Publisher="CN=ZedIndustries"
              Uri="https://$($env:GITHUB_SERVER_URL)/$repoFullName/releases/download/$($env:LATEST_TAG)/Zed-windows-amd64-$($env:LATEST_TAG).msix" />

            <UpdateSettings>
              <OnLaunch HoursBetweenUpdateChecks="0" />
              <ShowPrompt>true</ShowPrompt>
              <UpdateBlocksActivation>false</UpdateBlocksActivation>
            </UpdateSettings>
          </AppInstaller>
          "@

          $appInstallerFileName = "Zed-windows-amd64-$env:LATEST_TAG.appinstaller"
          $appInstallerContent | Out-File -FilePath $appInstallerFileName -Encoding utf8NoBOM
          Write-Host "Created $appInstallerFileName file"

          # Verify the content of the .appinstaller file
          Get-Content $appInstallerFileName

      - name: List directory contents
        working-directory: ./zed
        run: |
          Write-Host "Current directory (zed/):"
          Get-Location
          Write-Host "Directory contents:"
          Get-ChildItem -Recurse | Select-Object FullName, Length, CreationTime, LastWriteTime

      - name: Prepare and copy artifacts
        run: |
          $taggedExe = "zed\\target\\release\\Zed-windows-amd64-${{ env.LATEST_TAG }}.exe"
          $msixPackage = "zed\\Zed-windows-amd64-${{ env.LATEST_TAG }}.msix"
          $appInstaller = "zed\\Zed-windows-amd64-${{ env.LATEST_TAG }}.appinstaller"
          $certificateFile = "signing_cert.cer" # The generated .cer file

          if (Test-Path $taggedExe) {
            Copy-Item $taggedExe . -Force
            Write-Host "Copied $taggedExe to root directory"
          } else {
            Write-Host "Warning: Tagged Zed executable not found at $taggedExe. This might be okay if MSIX is primary."
          }
          if (Test-Path $msixPackage) {
            Copy-Item $msixPackage . -Force
            Write-Host "Copied $msixPackage to root directory"
          } else {
            Write-Host "Error: MSIX package not found at $msixPackage"
            exit 1
          }
          if (Test-Path $appInstaller) {
            Copy-Item $appInstaller . -Force
            Write-Host "Copied $appInstaller to root directory"
          } else {
            Write-Host "Error: AppInstaller file not found at $appInstaller"
            exit 1
          }
          if (Test-Path $certificateFile) {
            Copy-Item $certificateFile . -Force
            Write-Host "Copied $certificateFile to root directory"
          } else {
            Write-Host "Error: Certificate file not found at $certificateFile"
            exit 1
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Zed-windows-amd64-${{ env.LATEST_TAG }}-dist
          path: |
            Zed-windows-amd64-${{ env.LATEST_TAG }}.exe
            Zed-windows-amd64-${{ env.LATEST_TAG }}.msix
            Zed-windows-amd64-${{ env.LATEST_TAG }}.appinstaller
            signing_cert.cer
          if-no-files-found: error # Ensure we fail if any artifact is missing

      - name: Debug - List uploaded artifacts
        run: |
          echo "Uploaded artifact name: Zed-windows-amd64-${{ env.LATEST_TAG }}-dist"

  upload-to-release:
    needs: [set-version, build-windows-amd64]
    runs-on: ubuntu-latest
    env:
      LATEST_TAG: ${{ needs.set-version.outputs.latest_tag }}
      # Add GITHUB_SERVER_URL for AppInstaller URI consistency if needed, though it's usually available
      GITHUB_SERVER_URL: ${{ github.server_url }}
    steps:
      - name: Debug - Print LATEST_TAG
        run: |
          echo "LATEST_TAG value: ${{ env.LATEST_TAG }}"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Zed-windows-amd64-${{ env.LATEST_TAG }}-dist

      - name: Debug - List downloaded files
        run: ls -R

      - name: Get latest release info
        id: get_release_info
        run: |
          RELEASE_INFO=$(curl -s "https://api.github.com/repos/zed-industries/zed/releases/tags/${{ env.LATEST_TAG }}")
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body // "No release notes available."')
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Check existing release
        id: check_release
        run: |
          RELEASE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.LATEST_TAG }}")
          echo "RELEASE_EXISTS=$([[ $RELEASE_EXISTS == "200" ]] && echo "true" || echo "false")" >> $GITHUB_ENV

      - name: Debug - Print LATEST_TAG
        run: | 
          echo "LATEST_TAG value: ${{ needs.set-version.outputs.latest_tag }}"
          
      - name: Create or update release
        uses: softprops/action-gh-release@v1
        if: env.RELEASE_EXISTS == 'false'
        with:
          tag_name: ${{ env.LATEST_TAG }}
          name: ${{ env.LATEST_TAG }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
          files: |
            Zed-windows-amd64-${{ env.LATEST_TAG }}.exe
            Zed-windows-amd64-${{ env.LATEST_TAG }}.msix
            Zed-windows-amd64-${{ env.LATEST_TAG }}.appinstaller
            signing_cert.cer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing release
        uses: softprops/action-gh-release@v1
        if: env.RELEASE_EXISTS == 'true'
        with:
          tag_name: ${{ env.LATEST_TAG }}
          name: ${{ env.LATEST_TAG }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
          files: |
            Zed-windows-amd64-${{ env.LATEST_TAG }}.exe
            Zed-windows-amd64-${{ env.LATEST_TAG }}.msix
            Zed-windows-amd64-${{ env.LATEST_TAG }}.appinstaller
            signing_cert.cer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout build repository
        uses: actions/checkout@v4
        with:
          repository: yannouuuu/zed-windows-build
          fetch-depth: 0

      - name: Commit version update
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: update
          file_pattern: build.md *-update.json
          commit_message: Bump version ${{ env.LATEST_TAG }}